openapi: 3.0.0
servers:
  - url: 'http://petstore.swagger.io/v2'
info:
  description: >-
    This a social media where you can upload images, make post, post comments
    and more. Also it has the feature of making it possible to upload scripts
    which can automate the feature a user can use. 
  version: 1.0.0
  title: ImageHost
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
paths:
  /post:
    post:
      summary: Create a post with a image
      description: ''
      parameters: []
      operationId: createPost
      responses:
        default:
          description: Default response
  /login:
    get:
      summary: Gets the login token
      description: |-
        Sends the event RequestLoginToken.
        The reponse should be ReturnAuthenticationToken.
      parameters: []
      operationId: getLogin
      responses:
        default:
          description: Default response
    delete:
      summary: Invalidates the login token in the gateway
      description: It invalidates the jwt such that it can no longer be used to login.
      parameters: []
      operationId: deleteLogin
      responses:
        default:
          description: Default response
    x-temp:
      summary: Creates a user which can be used to log in
      description: |-
        Sends the event RequestAccountCreate.
        Gets the event ConfirmAccountCreation in reponse.
      parameters: []
      operationId: putLogin
      responses:
        default:
          description: Default response
    put:
      summary: Updates the password of a user
      description: |-
        Can only be done by a user who are logged in.
        Sends the event RequestAccountPasswordUpdate.
        Gets the event ConfirmSetPassword in reponse.
      parameters: []
      operationId: updatePassword
      responses:
        default:
          description: Default response
  /script:
    post:
      summary: Creates a user script with a specified main file.
      description: ''
      parameters: []
      operationId: createScript
      responses:
        default:
          description: Default response
  '/user/{id}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: |-
        Sends the event RequestAccountData.
        Gets the event ReturnAccountInfo in reponse.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: |-
        This can only be done by the logged in user.
        Sends the event UpdateAccount.
        Gets the event ConfirmAccountUpdate in reponse.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: |-
        This can only be done by the logged in user.
        Sends the event RequestAccountDelete.
        Gets the event ConfirmAccountDeletion in reponse. 
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/post/{pid}':
    get:
      summary: Gets a post with from a post id
      description: ''
      parameters: []
      operationId: getPost
      responses:
        default:
          description: Default response
    put:
      summary: Update a post using its id.
      description: ''
      parameters: []
      operationId: updatePost
      responses:
        default:
          description: Default response
    delete:
      summary: Delete a post
      description: ''
      parameters: []
      operationId: deletePost
      responses:
        default:
          description: Default response
  '/post/{pid}/comments':
    post:
      summary: Creates a comment on a post
      description: |-
        Sends the event CreateComment.
        Gets the event ConfirmCommentCreation in reponse.
      parameters: []
      operationId: createComment
      responses:
        default:
          description: Default response
    get:
      summary: Gets the comments on a post
      description: |-
        Sends the event RequestCommentsForPost.
        Gets the event ReturnCommentsForPost in reponse.
      parameters: []
      operationId: getCommentsForPost
      responses:
        default:
          description: Default response
  '/post/{pid}/likes/{userid}':
    get:
      summary: Gets if the user likes the post
      description: |-
        Sends the event RequestLikeStatus.
        Gets the event ReturnLikeStatus in reponse.
      parameters: []
      operationId: getLikeStatus
      responses:
        default:
          description: Default response
    put:
      summary: Changes the like status for a user on a post
      description: |-
        If the user likes the post it unlikes it and vice versa.
        Sends the event UpdateLike.
        Gets the event ConfirmLikeUpdate in reponse.
      parameters: []
      operationId: updateLikeStatus
      responses:
        default:
          description: Default response
  /user/admin/ban:
    x-temp:
      summary: Update role of a user
      description: |-
        Can only be done by a admin user who is logged in.
        Sends the event UpdateAccountPrivileges.
        Get the event ConfirmAccountUpdate in response.
      parameters: []
      operationId: updateRole
      responses:
        default:
          description: Default response
    put:
      summary: Ban a user
      description: |-
        Can only be done by a admin user who is logged in.
        Sends the event RequestBanUser.
        Gets the event ConfirmBanUser in reponse. 
      parameters: []
      operationId: updateBan
      responses:
        default:
          description: Default response
  /user/admin/flag:
    put:
      summary: Flag a user
      description: |-
        Can only be done by a admin user who is logged in.
        Sends the event RequestFlagUser.
        Gets the event ConfirmFlagUser in reponse.
      parameters: []
      operationId: updateFlag
      responses:
        default:
          description: Default response
    get:
      summary: Gets all users who have been flagged.
      description: |-
        Can only be done by an admin user who is logged in.
        Sends the event RequestAllFlagged.
        Get the event ReturnAllFlagged in reponse.
      parameters: []
      operationId: getAllFlagged
      responses:
        default:
          description: Default response
  /user/admin:
    put:
      summary: Update role of a user
      description: |-
        Can only be done by an admin user.
        Sends the event UpdateAccountPrivileges.
        Gets the event ConfirmAccountUpdate in reponse. 
      parameters: []
      operationId: updateRole
      responses:
        default:
          description: Default response
  '/post/{pid}/likes':
    get:
      summary: Gets the amount of likes for a post
      description: |-
        Sends the event RequestLikesForPost.
        Gets the event ReturnLikesForPost in reponse.
      parameters: []
      operationId: getLikesForPost
      responses:
        default:
          description: Default response
  /post/posts:
    get:
      summary: Gets many posts from a array of post ids.
      description: ''
      parameters: []
      operationId: getPosts
      responses:
        default:
          description: Default response
    delete:
      summary: Delete multiple posts
      description: ''
      parameters: []
      operationId: deleteManyPosts
      responses:
        default:
          description: Default response
  '/post/{pid}/history':
    get:
      summary: Get the post history using a post id.
      description: ''
      parameters: []
      operationId: getHistory
      responses:
        default:
          description: Default response
  '/user/{id}/posts':
    get:
      summary: Gets the posts a user is author of.
      description: ''
      parameters: []
      operationId: getUserPosts
      responses:
        default:
          description: Default response
  '/post/{pid}/comments/{cid}':
    put:
      summary: Update a comment using its id
      description: |-
        Sends the event UpdateComment.
        Gets the event ConfirmCommentUpdate in response.
      parameters: []
      operationId: updateComment
      responses:
        default:
          description: Default response
    delete:
      summary: Delete a comment using its id
      description: |-
        Sends the event DeleteComment.
        Gets the event ConfirmCommentDelete in reponse.
      parameters: []
      operationId: deleteComment
      responses:
        default:
          description: Default response
    get:
      summary: Get a comment using its id
      description: |-
        Sends the event RequestComment.
        Gets the event ReturnComment in response.
      parameters: []
      operationId: getComment
      responses:
        default:
          description: Default response
  /tag:
    post:
      summary: Create a tag
      description: |-
        Sends the event CreateTag.
        Gets the event ConfirmTagCreation in response.
      parameters: []
      operationId: createTag
      responses:
        default:
          description: Default response
  '/tag/{tid}':
    x-temp:
      summary: ''
      description: ''
      parameters: []
      operationId: ''
      responses:
        default:
          description: Default response
    put:
      summary: Update a tag using its id.
      description: |-
        Sends the event UpdateTag.
        Gets the event ConfirmTagUpdate in reponse.
      parameters: []
      operationId: updateTag
      responses:
        default:
          description: Default response
    delete:
      summary: Delete a tag using its id
      description: |-
        Sends the event DeleteTag.
        Gets the event ConfirmTagDelete in reponse.
      parameters: []
      operationId: deleteTag
      responses:
        default:
          description: Default response
    get:
      summary: Gets a tag using the id.
      description: |-
        Sends the event RequestTag.
        Gets the event ReturnTag in reponse.
      parameters: []
      operationId: getTag
      responses:
        default:
          description: Default response
  '/post/{pid}/tags':
    post:
      summary: Adds a already created tag to a post
      description: |-
        Sends the event AddTagToPost.
        Gets the event ConfirmAddedTag in reponse.
      parameters: []
      operationId: addTagToPost
      responses:
        default:
          description: Default response
    delete:
      summary: Removes a tag from a post.
      description: |-
        Sends the event RemoveTagFromPost.
        Gets the event ConfirmTagRemoval in reponse.
      parameters: []
      operationId: removeTagFromPost
      responses:
        default:
          description: Default response
    get:
      summary: Gets the tags used on the post.
      description: |-
        Sends the event RequestTagsForPost.
        Gets the event ReturnTagsForPost in reponse.
      parameters: []
      operationId: getTags
      responses:
        default:
          description: Default response
  /image:
    post:
      summary: Creates a image
      description: ''
      parameters: []
      operationId: createImage
      responses:
        default:
          description: Default response
  '/image/{iid}':
    get:
      summary: Gets an image using the id
      description: ''
      parameters: []
      operationId: getImage
      responses:
        default:
          description: Default response
    delete:
      summary: Deletes an image using the id
      description: ''
      parameters: []
      operationId: deleteImage
      responses:
        default:
          description: Default response
  '/script/{sid}':
    get:
      summary: Gets the user script using its id.
      description: ''
      parameters: []
      operationId: getScript
      responses:
        default:
          description: Default response
    put:
      summary: Updates a user script using its id.
      description: ''
      parameters: []
      operationId: updateScript
      responses:
        default:
          description: Default response
    delete:
      summary: Delete a user script using its id.
      description: ''
      parameters: []
      operationId: deleteScript
      responses:
        default:
          description: Default response
  '/script/{sid}/run':
    get:
      summary: Gets a script to be run using its id.
      description: ''
      parameters: []
      operationId: getScript
      responses:
        default:
          description: Default response
  /user:
    post:
      summary: Create a user which can be used to login
      description: |-
        Sends the event RequestAccountCreate.
        Gets the event ConfirmAccountCreation in reponse
      parameters: []
      operationId: createUser
      responses:
        default:
          description: Default response
externalDocs:
  description: ''
  url: 'https://mermade.github.io/shins/asyncapi.html'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
  links: {}
  callbacks: {}
security: []
